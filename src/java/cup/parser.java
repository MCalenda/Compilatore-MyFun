
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cup;

import java.util.ArrayList;
import tree.nodes.*;
import tree.leaves.*;
import symbol_table.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\005\000\002\002\004\000\002\006" +
    "\005\000\002\006\005\000\002\003\002\000\002\003\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\012\003\000\002\012\005\000\002" +
    "\010\003\000\002\010\005\000\002\010\005\000\002\010" +
    "\007\000\002\011\005\000\002\011\007\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\017\016\000\002\017\014\000\002" +
    "\004\002\000\002\004\004\000\002\020\006\000\002\020" +
    "\005\000\002\022\004\000\002\022\005\000\002\015\002" +
    "\000\002\015\003\000\002\023\003\000\002\023\005\000" +
    "\002\005\010\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\024\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\005\000\002\016\002\000\002\016\004" +
    "\000\002\031\005\000\002\027\005\000\002\027\004\000" +
    "\002\030\004\000\002\030\004\000\002\030\004\000\002" +
    "\030\004\000\002\025\012\000\002\032\002\000\002\032" +
    "\005\000\002\026\011\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\004\000\002\013\004\000\002\013" +
    "\005\000\002\021\003\000\002\021\005\000\002\021\004" +
    "\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\020\007\013\050\ufffd\054\010\055\014\056" +
    "\012\057\007\060\ufffd\001\002\000\006\050\136\060\uffe8" +
    "\001\002\000\004\066\035\001\002\000\004\002\034\001" +
    "\002\000\040\007\ufffb\011\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\046\ufffb\047\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\066\ufffb\001\002\000\040\007\ufffa" +
    "\011\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\046\ufffa\047\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\066\ufffa\001\002\000\046\007\013\011\ufffd\036\ufffd\037" +
    "\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\054\010\055\014\056\012\057\007\060" +
    "\ufffd\066\ufffd\001\002\000\040\007\ufff8\011\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\046\ufff8\047" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\066\ufff8\001\002" +
    "\000\004\066\015\001\002\000\040\007\ufff9\011\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\046\ufff9" +
    "\047\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\066\ufff9\001" +
    "\002\000\004\035\031\001\002\000\006\012\017\013\020" +
    "\001\002\000\004\066\021\001\002\000\046\007\ufffe\011" +
    "\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe" +
    "\044\ufffe\046\ufffe\047\ufffe\050\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\057\ufffe\060\ufffe\066\ufffe\001\002\000\004\035\022" +
    "\001\002\000\014\061\025\062\027\063\024\064\030\065" +
    "\023\001\002\000\006\012\uffeb\013\uffeb\001\002\000\006" +
    "\012\uffef\013\uffef\001\002\000\006\012\uffed\013\uffed\001" +
    "\002\000\006\012\ufff0\013\ufff0\001\002\000\006\012\uffec" +
    "\013\uffec\001\002\000\006\012\uffee\013\uffee\001\002\000" +
    "\014\061\025\062\027\063\024\064\030\065\023\001\002" +
    "\000\006\012\ufff1\013\ufff1\001\002\000\034\011\ufffc\036" +
    "\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc" +
    "\046\ufffc\047\ufffc\050\ufffc\060\ufffc\066\ufffc\001\002\000" +
    "\004\002\000\001\002\000\010\012\ufff5\013\ufff5\035\133" +
    "\001\002\000\006\012\037\013\040\001\002\000\004\066" +
    "\041\001\002\000\046\007\uffff\011\uffff\036\uffff\037\uffff" +
    "\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\046\uffff\047" +
    "\uffff\050\uffff\054\uffff\055\uffff\056\uffff\057\uffff\060\uffff" +
    "\066\uffff\001\002\000\010\012\ufff4\013\ufff4\035\042\001" +
    "\002\000\024\015\055\033\043\053\051\061\046\062\052" +
    "\063\053\064\044\065\047\066\054\001\002\000\024\015" +
    "\055\033\043\053\051\061\046\062\052\063\053\064\044" +
    "\065\047\066\054\001\002\000\052\005\uffc6\012\uffc6\013" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\045\uffc6\052\uffc6\001\002\000\044" +
    "\012\ufff2\013\ufff2\016\074\017\060\020\062\021\067\022" +
    "\065\023\073\024\072\025\064\026\071\027\061\030\066" +
    "\031\075\032\070\033\057\034\063\001\002\000\052\005" +
    "\uffc9\012\uffc9\013\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\045\uffc9\052\uffc9" +
    "\001\002\000\052\005\uffc5\012\uffc5\013\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\045\uffc5\052\uffc5\001\002\000\052\005\uffc3\012\uffc3" +
    "\013\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\045\uffc3\052\uffc3\001\002\000" +
    "\024\015\055\033\043\053\051\061\046\062\052\063\053" +
    "\064\044\065\047\066\054\001\002\000\052\005\uffc8\012" +
    "\uffc8\013\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\045\uffc8\052\uffc8\001\002" +
    "\000\052\005\uffc7\012\uffc7\013\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\045" +
    "\uffc7\052\uffc7\001\002\000\054\005\uffc4\012\uffc4\013\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\045\uffc4\052\uffc4\053\115\001\002\000" +
    "\024\015\055\033\043\053\051\061\046\062\052\063\053" +
    "\064\044\065\047\066\054\001\002\000\052\005\uffb2\012" +
    "\uffb2\013\uffb2\016\uffb2\017\uffb2\020\062\021\067\022\065" +
    "\023\073\024\072\025\064\026\071\027\061\030\066\031" +
    "\075\032\070\033\057\034\063\045\uffb2\052\uffb2\001\002" +
    "\000\024\015\055\033\043\053\051\061\046\062\052\063" +
    "\053\064\044\065\047\066\054\001\002\000\024\015\055" +
    "\033\043\053\051\061\046\062\052\063\053\064\044\065" +
    "\047\066\054\001\002\000\024\015\055\033\043\053\051" +
    "\061\046\062\052\063\053\064\044\065\047\066\054\001" +
    "\002\000\024\015\055\033\043\053\051\061\046\062\052" +
    "\063\053\064\044\065\047\066\054\001\002\000\024\015" +
    "\055\033\043\053\051\061\046\062\052\063\053\064\044" +
    "\065\047\066\054\001\002\000\024\015\055\033\043\053" +
    "\051\061\046\062\052\063\053\064\044\065\047\066\054" +
    "\001\002\000\024\015\055\033\043\053\051\061\046\062" +
    "\052\063\053\064\044\065\047\066\054\001\002\000\024" +
    "\015\055\033\043\053\051\061\046\062\052\063\053\064" +
    "\044\065\047\066\054\001\002\000\024\015\055\033\043" +
    "\053\051\061\046\062\052\063\053\064\044\065\047\066" +
    "\054\001\002\000\024\015\055\033\043\053\051\061\046" +
    "\062\052\063\053\064\044\065\047\066\054\001\002\000" +
    "\024\015\055\033\043\053\051\061\046\062\052\063\053" +
    "\064\044\065\047\066\054\001\002\000\024\015\055\033" +
    "\043\053\051\061\046\062\052\063\053\064\044\065\047" +
    "\066\054\001\002\000\024\015\055\033\043\053\051\061" +
    "\046\062\052\063\053\064\044\065\047\066\054\001\002" +
    "\000\024\015\055\033\043\053\051\061\046\062\052\063" +
    "\053\064\044\065\047\066\054\001\002\000\024\015\055" +
    "\033\043\053\051\061\046\062\052\063\053\064\044\065" +
    "\047\066\054\001\002\000\052\005\uffbe\012\uffbe\013\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\061\030\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\045\uffbe\052\uffbe\001\002\000\052\005" +
    "\uffba\012\uffba\013\uffba\016\uffba\017\060\020\062\021\067" +
    "\022\065\023\073\024\072\025\064\026\071\027\061\030" +
    "\066\031\075\032\070\033\057\034\063\045\uffba\052\uffba" +
    "\001\002\000\036\005\uffb7\012\uffb7\013\uffb7\016\uffb7\017" +
    "\uffb7\026\071\027\061\030\066\031\075\032\070\033\057" +
    "\034\063\045\uffb7\052\uffb7\001\002\000\036\005\uffb4\012" +
    "\uffb4\013\uffb4\016\uffb4\017\uffb4\026\071\027\061\030\066" +
    "\031\075\032\070\033\057\034\063\045\uffb4\052\uffb4\001" +
    "\002\000\052\005\uffbb\012\uffbb\013\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\061\030\066\031\075\032\070\033\057\034\063" +
    "\045\uffbb\052\uffbb\001\002\000\052\005\uffc0\012\uffc0\013" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\061\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\045\uffc0\052\uffc0\001\002\000\036" +
    "\005\uffb9\012\uffb9\013\uffb9\016\uffb9\017\uffb9\026\071\027" +
    "\061\030\066\031\075\032\070\033\057\034\063\045\uffb9" +
    "\052\uffb9\001\002\000\052\005\uffbf\012\uffbf\013\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\061\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\045\uffbf\052\uffbf\001\002\000\036\005\uffb6" +
    "\012\uffb6\013\uffb6\016\uffb6\017\uffb6\026\071\027\061\030" +
    "\066\031\075\032\070\033\057\034\063\045\uffb6\052\uffb6" +
    "\001\002\000\036\005\uffb5\012\uffb5\013\uffb5\016\uffb5\017" +
    "\uffb5\026\071\027\061\030\066\031\075\032\070\033\057" +
    "\034\063\045\uffb5\052\uffb5\001\002\000\052\005\uffc2\012" +
    "\uffc2\013\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\061\030\066\031" +
    "\075\032\070\033\uffc2\034\uffc2\045\uffc2\052\uffc2\001\002" +
    "\000\036\005\uffb8\012\uffb8\013\uffb8\016\uffb8\017\uffb8\026" +
    "\071\027\061\030\066\031\075\032\070\033\057\034\063" +
    "\045\uffb8\052\uffb8\001\002\000\052\005\uffbc\012\uffbc\013" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\061\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\045\uffbc\052\uffbc\001\002\000\052" +
    "\005\uffbd\012\uffbd\013\uffbd\016\uffbd\017\uffbd\020\062\021" +
    "\067\022\065\023\073\024\072\025\064\026\071\027\061" +
    "\030\066\031\075\032\070\033\057\034\063\045\uffbd\052" +
    "\uffbd\001\002\000\052\005\uffc1\012\uffc1\013\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\061\030\066\031\075\032\070\033\uffc1" +
    "\034\uffc1\045\uffc1\052\uffc1\001\002\000\030\010\120\015" +
    "\055\033\043\052\121\053\051\061\046\062\052\063\053" +
    "\064\044\065\047\066\054\001\002\000\044\012\126\016" +
    "\074\017\060\020\062\021\067\022\065\023\073\024\072" +
    "\025\064\026\071\027\061\030\066\031\075\032\070\033" +
    "\057\034\063\052\uffb0\001\002\000\004\052\125\001\002" +
    "\000\004\066\122\001\002\000\052\005\uffe5\012\uffe5\013" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\045\uffe5\052\uffe5\001\002\000\006" +
    "\012\123\052\uffae\001\002\000\026\010\120\015\055\033" +
    "\043\053\051\061\046\062\052\063\053\064\044\065\047" +
    "\066\054\001\002\000\004\052\uffad\001\002\000\052\005" +
    "\uffe6\012\uffe6\013\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\045\uffe6\052\uffe6" +
    "\001\002\000\026\010\120\015\055\033\043\053\051\061" +
    "\046\062\052\063\053\064\044\065\047\066\054\001\002" +
    "\000\004\052\uffaf\001\002\000\042\016\074\017\060\020" +
    "\062\021\067\022\065\023\073\024\072\025\064\026\071" +
    "\027\061\030\066\031\075\032\070\033\057\034\063\052" +
    "\131\001\002\000\052\005\uffb1\012\uffb1\013\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\045\uffb1\052\uffb1\001\002\000\052\005\uffb3\012" +
    "\uffb3\013\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\045\uffb3\052\uffb3\001\002" +
    "\000\024\015\055\033\043\053\051\061\046\062\052\063" +
    "\053\064\044\065\047\066\054\001\002\000\044\012\ufff3" +
    "\013\ufff3\016\074\017\060\020\062\021\067\022\065\023" +
    "\073\024\072\025\064\026\071\027\061\030\066\031\075" +
    "\032\070\033\057\034\063\001\002\000\006\050\136\060" +
    "\uffe8\001\002\000\004\066\232\001\002\000\004\060\140" +
    "\001\002\000\040\007\013\011\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\046\ufffd\047\ufffd\054\010" +
    "\055\014\056\012\057\007\066\ufffd\001\002\000\004\002" +
    "\001\001\002\000\026\011\uffd6\036\uffd6\037\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\046\uffd6\047\uffd6\066\uffd6\001" +
    "\002\000\026\011\161\036\147\037\164\040\150\041\156" +
    "\042\144\043\145\046\153\047\163\066\155\001\002\000" +
    "\004\066\225\001\002\000\024\015\055\033\043\053\051" +
    "\061\046\062\052\063\053\064\044\065\047\066\054\001" +
    "\002\000\004\013\216\001\002\000\024\015\055\033\043" +
    "\053\051\061\046\062\052\063\053\064\044\065\047\066" +
    "\054\001\002\000\024\015\055\033\043\053\051\061\046" +
    "\062\052\063\053\064\044\065\047\066\054\001\002\000" +
    "\004\013\213\001\002\000\004\013\212\001\002\000\024" +
    "\015\055\033\043\053\051\061\046\062\052\063\053\064" +
    "\044\065\047\066\054\001\002\000\004\013\177\001\002" +
    "\000\006\035\175\053\115\001\002\000\024\015\055\033" +
    "\043\053\051\061\046\062\052\063\053\064\044\065\047" +
    "\066\054\001\002\000\004\013\173\001\002\000\030\011" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\046\uffd5\047\uffd5\066\uffd5\001\002\000\024\015" +
    "\055\033\043\053\051\061\046\062\052\063\053\064\044" +
    "\065\047\066\054\001\002\000\004\013\170\001\002\000" +
    "\004\060\166\001\002\000\024\015\055\033\043\053\051" +
    "\061\046\062\052\063\053\064\044\065\047\066\054\001" +
    "\002\000\042\013\uffce\016\074\017\060\020\062\021\067" +
    "\022\065\023\073\024\072\025\064\026\071\027\061\030" +
    "\066\031\075\032\070\033\057\034\063\001\002\000\004" +
    "\013\167\001\002\000\004\002\uffde\001\002\000\030\011" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\046\uffdb\047\uffdb\066\uffdb\001\002\000\042\013" +
    "\172\016\074\017\060\020\062\021\067\022\065\023\073" +
    "\024\072\025\064\026\071\027\061\030\066\031\075\032" +
    "\070\033\057\034\063\001\002\000\030\011\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\046" +
    "\uffd7\047\uffd7\066\uffd7\001\002\000\030\011\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\046" +
    "\uffda\047\uffda\066\uffda\001\002\000\042\013\uffd1\016\074" +
    "\017\060\020\062\021\067\022\065\023\073\024\072\025" +
    "\064\026\071\027\061\030\066\031\075\032\070\033\057" +
    "\034\063\001\002\000\024\015\055\033\043\053\051\061" +
    "\046\062\052\063\053\064\044\065\047\066\054\001\002" +
    "\000\042\013\uffd4\016\074\017\060\020\062\021\067\022" +
    "\065\023\073\024\072\025\064\026\071\027\061\030\066" +
    "\031\075\032\070\033\057\034\063\001\002\000\030\011" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\046\uffd9\047\uffd9\066\uffd9\001\002\000\042\016" +
    "\074\017\060\020\062\021\067\022\065\023\073\024\072" +
    "\025\064\026\071\027\061\030\066\031\075\032\070\033" +
    "\057\034\063\045\201\001\002\000\042\007\013\011\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044" +
    "\ufffd\046\ufffd\047\ufffd\054\010\055\014\056\012\057\007" +
    "\066\ufffd\001\002\000\030\011\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\046\uffd6\047\uffd6" +
    "\066\uffd6\001\002\000\030\011\161\036\147\037\164\040" +
    "\150\041\156\042\144\043\145\044\205\046\153\047\uffcc" +
    "\066\155\001\002\000\004\047\210\001\002\000\040\007" +
    "\013\011\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\046\ufffd\047\ufffd\054\010\055\014\056\012\057" +
    "\007\066\ufffd\001\002\000\026\011\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\046\uffd6\047\uffd6\066" +
    "\uffd6\001\002\000\026\011\161\036\147\037\164\040\150" +
    "\041\156\042\144\043\145\046\153\047\uffcb\066\155\001" +
    "\002\000\004\046\211\001\002\000\004\013\uffcd\001\002" +
    "\000\030\011\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\046\uffdd\047\uffdd\066\uffdd\001\002" +
    "\000\030\011\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\046\uffd8\047\uffd8\066\uffd8\001\002" +
    "\000\042\013\uffd0\016\074\017\060\020\062\021\067\022" +
    "\065\023\073\024\072\025\064\026\071\027\061\030\066" +
    "\031\075\032\070\033\057\034\063\001\002\000\042\013" +
    "\uffcf\016\074\017\060\020\062\021\067\022\065\023\073" +
    "\024\072\025\064\026\071\027\061\030\066\031\075\032" +
    "\070\033\057\034\063\001\002\000\030\011\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\046" +
    "\uffdc\047\uffdc\066\uffdc\001\002\000\042\005\220\016\074" +
    "\017\060\020\062\021\067\022\065\023\073\024\072\025" +
    "\064\026\071\027\061\030\066\031\075\032\070\033\057" +
    "\034\063\001\002\000\040\007\013\011\ufffd\036\ufffd\037" +
    "\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\046\ufffd\047\ufffd" +
    "\054\010\055\014\056\012\057\007\066\ufffd\001\002\000" +
    "\026\011\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\046\uffd6\047\uffd6\066\uffd6\001\002\000\026\011" +
    "\161\036\147\037\164\040\150\041\156\042\144\043\145" +
    "\046\153\047\223\066\155\001\002\000\004\005\224\001" +
    "\002\000\004\013\uffca\001\002\000\030\012\ufff7\013\ufff7" +
    "\015\ufff7\033\ufff7\053\ufff7\061\ufff7\062\ufff7\063\ufff7\064" +
    "\ufff7\065\ufff7\066\ufff7\001\002\000\030\012\230\013\uffd2" +
    "\015\055\033\043\053\051\061\046\062\052\063\053\064" +
    "\044\065\047\066\054\001\002\000\042\013\uffd3\016\074" +
    "\017\060\020\062\021\067\022\065\023\073\024\072\025" +
    "\064\026\071\027\061\030\066\031\075\032\070\033\057" +
    "\034\063\001\002\000\004\066\231\001\002\000\030\012" +
    "\ufff6\013\ufff6\015\ufff6\033\ufff6\053\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\064\ufff6\065\ufff6\066\ufff6\001\002\000\004\053" +
    "\233\001\002\000\016\006\240\052\uffe2\054\010\055\014" +
    "\056\012\057\007\001\002\000\004\066\262\001\002\000" +
    "\004\052\245\001\002\000\006\012\uffe0\052\uffe0\001\002" +
    "\000\006\012\243\052\uffe1\001\002\000\012\054\010\055" +
    "\014\056\012\057\007\001\002\000\004\066\242\001\002" +
    "\000\006\012\uffe3\052\uffe3\001\002\000\014\006\240\054" +
    "\010\055\014\056\012\057\007\001\002\000\006\012\uffdf" +
    "\052\uffdf\001\002\000\042\007\013\011\ufffd\036\ufffd\037" +
    "\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\046\ufffd\047\ufffd" +
    "\051\247\054\010\055\014\056\012\057\007\066\ufffd\001" +
    "\002\000\026\011\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\046\uffd6\047\uffd6\066\uffd6\001\002\000" +
    "\012\054\010\055\014\056\012\057\007\001\002\000\040" +
    "\007\013\011\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\046\ufffd\047\ufffd\054\010\055\014\056\012" +
    "\057\007\066\ufffd\001\002\000\026\011\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\046\uffd6\047\uffd6" +
    "\066\uffd6\001\002\000\026\011\161\036\147\037\164\040" +
    "\150\041\156\042\144\043\145\046\153\047\253\066\155" +
    "\001\002\000\004\050\254\001\002\000\004\013\255\001" +
    "\002\000\006\050\uffea\060\uffea\001\002\000\026\011\161" +
    "\036\147\037\164\040\150\041\156\042\144\043\145\046" +
    "\153\047\257\066\155\001\002\000\004\050\260\001\002" +
    "\000\004\013\261\001\002\000\006\050\uffe9\060\uffe9\001" +
    "\002\000\006\012\uffe4\052\uffe4\001\002\000\004\060\uffe7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\012\002\005\003\003\006\010\007\004\001" +
    "\001\000\006\004\136\017\134\001\001\000\004\010\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\032\006\010\007\004\001\001\000\002" +
    "\001\001\000\004\011\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\044" +
    "\020\047\001\001\000\006\013\131\020\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\127\020\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\055\020\047\001\001\000\002\001\001\000" +
    "\006\013\113\020\047\001\001\000\006\013\112\020\047" +
    "\001\001\000\006\013\111\020\047\001\001\000\006\013" +
    "\110\020\047\001\001\000\006\013\107\020\047\001\001" +
    "\000\006\013\106\020\047\001\001\000\006\013\105\020" +
    "\047\001\001\000\006\013\104\020\047\001\001\000\006" +
    "\013\103\020\047\001\001\000\006\013\102\020\047\001" +
    "\001\000\006\013\101\020\047\001\001\000\006\013\100" +
    "\020\047\001\001\000\006\013\077\020\047\001\001\000" +
    "\006\013\076\020\047\001\001\000\006\013\075\020\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\115\020\047\021\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\115\020\047\021\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\115\020\047\021" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\133\020\047\001" +
    "\001\000\002\001\001\000\006\004\262\017\134\001\001" +
    "\000\002\001\001\000\004\005\140\001\001\000\010\003" +
    "\141\006\010\007\004\001\001\000\002\001\001\000\004" +
    "\016\142\001\001\000\020\020\150\024\157\025\151\026" +
    "\145\027\161\030\156\031\153\001\001\000\004\012\225" +
    "\001\001\000\006\013\216\020\047\001\001\000\002\001" +
    "\001\000\006\013\214\020\047\001\001\000\006\013\213" +
    "\020\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\177\020\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\173\020\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\170\020\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\164\020" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\175" +
    "\020\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\201\006\010\007\004\001\001" +
    "\000\004\016\202\001\001\000\022\020\150\024\157\025" +
    "\151\026\145\027\161\030\156\031\153\032\203\001\001" +
    "\000\002\001\001\000\010\003\205\006\010\007\004\001" +
    "\001\000\004\016\206\001\001\000\020\020\150\024\157" +
    "\025\151\026\145\027\161\030\156\031\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\220\006\010\007\004" +
    "\001\001\000\004\016\221\001\001\000\020\020\150\024" +
    "\157\025\151\026\145\027\161\030\156\031\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\226\020\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\233\015\234\022\235\023\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\233\022\243\001\001\000\002\001\001\000" +
    "\010\003\245\006\010\007\004\001\001\000\004\016\255" +
    "\001\001\000\004\007\247\001\001\000\010\003\250\006" +
    "\010\007\004\001\001\000\004\016\251\001\001\000\020" +
    "\020\150\024\157\025\151\026\145\027\161\030\156\031" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\020\150\024\157\025\151\026\145\027" +
    "\161\030\156\031\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDecList FunList Main 
            {
              Object RESULT =null;
		int varDecListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDecListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varDecList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ProgramNode((ArrayList<VarDeclNode>)varDecList, (ArrayList<FunNode>)funList, (MainNode)main); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDecl ::= Type IdListInit SEMI 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idListInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new VarDeclNode((ValueType) type, (ArrayList<IdInitNode>)idListInit); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDecl ::= VAR IdListInitObbl SEMI 
            {
              Object RESULT =null;
		int idListInitObblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListInitObblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idListInitObbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new VarDeclNode((ArrayList<IdInitObblNode>) idListInitObbl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarDecList ::= 
            {
              Object RESULT =null;
		 RESULT= new ArrayList<VarDeclNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecList ::= VarDecl VarDecList 
            {
              Object RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDecListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDecListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varDecList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<VarDeclNode>)varDecList).add(0, (VarDeclNode) varDecl); RESULT = varDecList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Type ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT= ValueType.integer; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT= ValueType.bool; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= REAL 
            {
              Object RESULT =null;
		 RESULT= ValueType.real; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT= ValueType.string; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IdList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<LeafID> tmp_list = new ArrayList<LeafID>(); tmp_list.add(0, new LeafID(id)); RESULT = tmp_list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IdList ::= IdList COMMA ID 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<LeafID>) idList).add(0, new LeafID(id)); RESULT = idList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IdListInit ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IdInitNode> tmp_list = new ArrayList<IdInitNode>(); tmp_list.add(0, new IdInitNode(new LeafID(id))); RESULT = tmp_list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= IdListInit COMMA ID 
            {
              Object RESULT =null;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idListInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<IdInitNode>) idListInit).add(new IdInitNode(new LeafID(id))); RESULT = idListInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IdInitNode> tmp_list = new ArrayList<IdInitNode>(); tmp_list.add(0, new IdInitNode(new LeafID(id), (ExprNode) expr)); RESULT = tmp_list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idListInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<IdInitNode>) idListInit).add(new IdInitNode(new LeafID(id), (ExprNode) expr)); RESULT = idListInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdListInitObbl ::= ID ASSIGN Const 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IdInitObblNode> tmp_list = new ArrayList<IdInitObblNode>(); tmp_list.add(0, new IdInitObblNode(new LeafID(id), (ConstNode) constant)); RESULT = tmp_list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdListInitObbl ::= IdListInitObbl COMMA ID ASSIGN Const 
            {
              Object RESULT =null;
		int idListInitObblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListInitObblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idListInitObbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<IdInitObblNode>) idListInitObbl).add(new IdInitObblNode(new LeafID(id), (ConstNode) constant)); RESULT = idListInitObbl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstNode(new LeafIntegerConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= REAL_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstNode(new LeafRealConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= TRUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstNode(new LeafBool(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= FALSE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstNode(new LeafBool(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= STRING_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstNode(new LeafStringConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type VarDecList StatList END FUN SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object paramDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int varDecListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDecListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object varDecList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT= new FunNode(new LeafID(id), (ArrayList<ParamDecNode>) paramDeclList, (ValueType) type, (ArrayList<VarDeclNode>) varDecList, (ArrayList<StatNode>) statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Fun ::= FUN ID LPAR ParamDeclList RPAR VarDecList StatList END FUN SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object paramDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varDecListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDecListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object varDecList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT= new FunNode(new LeafID(id), (ArrayList<ParamDecNode>) paramDeclList, (ArrayList<VarDeclNode>) varDecList, (ArrayList<StatNode>) statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunList ::= 
            {
              Object RESULT =null;
		 RESULT= new ArrayList<FunNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FunList ::= Fun FunList 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<FunNode>)funList).add(0, (FunNode) fun); RESULT = funList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CallFun ::= ID LPAR ExprList RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new CallFunNode(new LeafID(id), (ArrayList<ExprNode>) exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CallFun ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new CallFunNode(new LeafID(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= Type ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ParamDecNode(false, (ValueType) type, new LeafID(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParDecl ::= OUT Type ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ParamDecNode(true, (ValueType) type, new LeafID(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParamDeclList ::= 
            {
              Object RESULT =null;
		 RESULT= new ArrayList<ParamDecNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              Object RESULT =null;
		int nonEmptyParamDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nonEmptyParamDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nonEmptyParamDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nonEmptyParamDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NonEmptyParamDeclList ::= ParDecl 
            {
              Object RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ParamDecNode> tmp_list = new ArrayList<ParamDecNode>(); tmp_list.add(0, (ParamDecNode) parDecl); RESULT = tmp_list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NonEmptyParamDeclList ::= NonEmptyParamDeclList COMMA ParDecl 
            {
              Object RESULT =null;
		int nonEmptyParamDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nonEmptyParamDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nonEmptyParamDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<ParamDecNode>) nonEmptyParamDeclList).add((ParamDecNode) parDecl); RESULT = nonEmptyParamDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Main ::= MAIN VarDecList StatList END MAIN SEMI 
            {
              Object RESULT =null;
		int varDecListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDecListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object varDecList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT= new MainNode((ArrayList<VarDeclNode>) varDecList, (ArrayList<StatNode>) statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= IfStat SEMI 
            {
              Object RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ifStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatNode((IfStatNode) ifStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= WhileStat SEMI 
            {
              Object RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object whileStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatNode((WhileStatNode) whileStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= ReadStat SEMI 
            {
              Object RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object readStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatNode((ReadStatNode) readStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= WriteStat SEMI 
            {
              Object RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object writeStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatNode((WriteStatNode) writeStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= AssignStat SEMI 
            {
              Object RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object assignStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatNode((AssignStatNode) assignStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= CallFun SEMI 
            {
              Object RESULT =null;
		int callFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int callFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object callFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatNode((CallFunNode) callFun); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatNode(new ReturnNode((ExprNode) expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // StatList ::= 
            {
              Object RESULT =null;
		 RESULT= new ArrayList<StatNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StatList ::= StatList Stat 
            {
              Object RESULT =null;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<StatNode>)statList).add((StatNode) stat); RESULT = statList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AssignStat ::= ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStatNode(new LeafID(id), (ExprNode) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ReadStat ::= READ IdList Expr 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadStatNode((ArrayList<LeafID>) idList, (ExprNode) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ReadStat ::= READ IdList 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadStatNode((ArrayList<LeafID>) idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WriteStat ::= WRITE Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatNode("WRITE", (ExprNode) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WriteStat ::= WRITELN Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatNode("WRITELN", (ExprNode) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WriteStat ::= WRITET Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatNode("WRITET", (ExprNode) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WriteStat ::= WRITEB Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatNode("WRITEB", (ExprNode) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IfStat ::= IF Expr THEN VarDecList StatList Else END IF 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varDecListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDecListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object varDecList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int else_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int else_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object else_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IfStatNode((ExprNode) expr, (ArrayList<VarDeclNode>) varDecList, (ArrayList<StatNode>) statList, (ElseNode) else_val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Else ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Else ::= ELSE VarDecList StatList 
            {
              Object RESULT =null;
		int varDecListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDecListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElseNode((ArrayList<VarDeclNode>) varDecList, (ArrayList<StatNode>) statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // WhileStat ::= WHILE Expr LOOP VarDecList StatList END LOOP 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int varDecListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varDecListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object varDecList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WhileStatNode((ExprNode) expr, (ArrayList<VarDeclNode>) varDecList, (ArrayList<StatNode>) statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= TRUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("BOOL_CONST", new LeafBool(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= FALSE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("BOOL_CONST", new LeafBool(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("INTEGER_CONST", new LeafIntegerConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= REAL_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("REAL_CONST", new LeafRealConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= STRING_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("STRING_CONST", new LeafStringConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("ID", new LeafID(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= CallFun 
            {
              Object RESULT =null;
		int callFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object callFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("CALLFUN", (CallFunNode) callFun); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("PLUS", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("MINUS", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("TIMES", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("DIV", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr DIVINT Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("DIVINT", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("AND", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr POW Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("POW", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr STR_CONCAT Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("STR_CONCAT", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("OR", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("GT", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("GE", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("LT", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("LE", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("EQ", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int val_oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val_oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val_one = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val_twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val_tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val_two = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("NE", (ExprNode) val_one, (ExprNode) val_two); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("UMINUS", (ExprNode) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("NOT", (ExprNode) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExprList ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ExprNode> tmp_list = new ArrayList<ExprNode>(); tmp_list.add(0, (ExprNode) expr); RESULT = tmp_list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExprList ::= Expr COMMA ExprList 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<ExprNode>) exprList).add(0,(ExprNode) expr); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExprList ::= OUTPAR ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ExprNode> tmp_list = new ArrayList<ExprNode>(); tmp_list.add(new ExprNode("OUTPAR", new LeafID(id))); RESULT = tmp_list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExprList ::= OUTPAR ID COMMA ExprList 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<ExprNode>) exprList).add(0, new ExprNode("OUTPAR", new LeafID(id))); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
